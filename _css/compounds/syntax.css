.highlight {
  /* Comment */
  & .c {
    color: color(var(--color-text) contrast(0));
    font-style: italic;
  }

  /* Comment.Single */
  & .c1 {
    color: color(var(--color-text) contrast(0));
    font-style: italic;
  }

  /* Comment.Multiline */
  & .cm {
    color: color(var(--color-text) contrast(0));
    font-style: italic;
  }

  /* Comment.Preproc */
  & .cp {
    color: color(var(--color-text) contrast(0));
    font-style: italic;
  }

  /* Comment.Special */
  & .cs {
    color: color(var(--color-text) contrast(0));
    font-style: italic;
  }

  /* Literal.String.Doc */
  & .sd {
    color: color(var(--color-text) contrast(0));
    font-style: italic;
  }

  /* Name.Other */
  & .nx {}

  /* Name.Entity */
  & .ni {}

  /* Name.Label */
  & .nl {}

  /* Name */
  & .n {}

  /* Generic */
  & .g {}

  /* Generic.Deleted */
  & .gd {
    text-decoration: line-through;
  }

  /* Generic.Emph */
  & .ge {
    font-style: italic;
  }

  /* Generic.Heading */
  & .gh {
    font-style: italic;
    font-weight: bolder;
    text-decoration: underline;
  }

  /* Generic.Inserted */
  & .gi {
    text-decoration: underline;
  }

  /* Generic.Output */
  & .go {}

  /* Generic.Prompt */
  & .gp {
    color: var(--color-back) var(--color-text);
  }

  /* Generic.Strong */
  & .gs {
    font-style: italic;
    font-weight: bolder;
  }

  /* Generic.Traceback */
  & .gt {}

  /* Generic.Subheading */
  & .gu {
    font-weight: bolder;
  }

  /* Other */
  & .x {}

  /* Name.Property */
  & .py {}

  /* Literal.String.Char */
  & .sc {}

  /* Whitespace */
  & .w {}

  /* Generic.Error */
  & .gr {
    color: var(--color-back) color(var(--color-base) hue(+180) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Keyword */
  & .k {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Keyword.Constant */
  & .kc {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Keyword.Declaration */
  & .kd {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Keyword.Pseudo */
  & .kp {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Keyword.Reserved */
  & .kr {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Keyword.Type */
  & .kt {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Keyword.Namespace */
  & .kn {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Symbol */
  & .ss {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.BuiltIn */
  & .nb {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.BuiltIn.Pseudo */
  & .bp {
    color: color(var(--color-base) hue(+45) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Decorator */
  & .nd {
    color: color(var(--color-base) hue(+90) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Tag */
  & .nt {
    color: color(var(--color-base) hue(+90) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Operator */
  & .o {
    color: color(var(--color-base) hue(+90) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Operator.Word */
  & .ow {
    color: color(var(--color-base) hue(+90) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Punctuation */
  & .p {
    color: color(var(--color-base) hue(+90) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Error */
  & .err {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Exception */
  & .ne {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Constant */
  & .no {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Variable */
  & .nv {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Variable.Class */
  & .vc {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Variable.Global */
  & .vg {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Variable.Instance */
  & .vi {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Interpol */
  & .si {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Escape */
  & .se {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.Date */
  & .ld {
    color: color(var(--color-base) hue(+135) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Attribute */
  & .na {
    color: color(var(--color-base) hue(+180) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Class */
  & .nc {
    color: color(var(--color-base) hue(+180) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Function */
  & .nf {
    color: color(var(--color-base) hue(+180) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Name.Namespace */
  & .nn {
    color: color(var(--color-base) hue(+180) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.Number.Integer.Long */
  & .il {
    color: color(var(--color-base) hue(+225) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.Number */
  & .m {
    color: color(var(--color-base) hue(+225) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.Number.Float */
  & .mf {
    color: color(var(--color-base) hue(+225) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.Number.Hex */
  & .mh {
    color: color(var(--color-base) hue(+225) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.Number.Integer */
  & .mi {
    color: color(var(--color-base) hue(+225) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.Number.Oct */
  & .mo {
    color: color(var(--color-base) hue(+225) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal */
  & .l {
    color: color(var(--color-base) hue(+225) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String */
  & .s {
    color: color(var(--color-base) hue(+270) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Single */
  & .s1 {
    color: color(var(--color-base) hue(+270) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Double */
  & .s2 {
    color: color(var(--color-base) hue(+270) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Backtick */
  & .sb {
    color: color(var(--color-base) hue(+270) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Heredoc */
  & .sh {
    color: color(var(--color-base) hue(+270) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Regex */
  & .sr {
    color: color(var(--color-base) hue(+270) saturation(+33%) blend(var(--color-back) 33%));
  }

  /* Literal.String.Other */
  & .sx {
    color: color(var(--color-base) hue(+270) saturation(+33%) blend(var(--color-back) 33%));
  }
}
